@page "/ActualizarMascotas/{Id:long}"
@inject AdopcionContext db
@inject DialogService dialogService

<h3>Editar</h3>


<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
    <RadzenStack>
        <EditForm Model="mascotaActualizada" method="post" OnValidSubmit="ActualizarMascota" enctype="multipart/form-data">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <RadzenFieldset Text="Mascota">
                <RadzenStack>
                    <RadzenFormField Text="Nombre" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@mascotaActualizada.Nombre" />
                    </RadzenFormField>
                    <RadzenFormField Text="FechaEncontrado" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value=@mascotaActualizada.FechaEncontrado ShowCalendarWeek />
                    </RadzenFormField>
                    <RadzenFormField Text="FechaPosibleNacimiento" Variant="Variant.Outlined">
                        <RadzenDatePicker @bind-Value=@mascotaActualizada.FechaPosibleNacimiento ShowCalendarWeek />
                    </RadzenFormField>
                    <RadzenFormField Text="TipoMascota" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="mascotaActualizada.TipoMascota" />
                    </RadzenFormField>
                    <RadzenFormField Text="PosiblesEnfermedades" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@mascotaActualizada.PosiblesEnfermedades" />
                    </RadzenFormField>
                    <RadzenFormField Text="Raza" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="mascotaActualizada.Raza" />
                    </RadzenFormField>
                    <RadzenFormField Text="Caracteristicas" Variant="Variant.Outlined">
                        <RadzenTextBox @bind-Value="@mascotaActualizada.Caracteristicas" />
                    </RadzenFormField>
                    <RadzenText TextStyle="TextStyle.H4"><strong>Foto</strong></RadzenText>
                    <InputFile OnChange="HandleFileSelected" />
                    @if (!string.IsNullOrEmpty(selectedFileName))
                    {
                        <p>Archivo seleccionado: @selectedFileName</p>
                    }
                    <RadzenImage Path="@mascotaActualizada?.Foto" Style="width: 100px; height: 100px;" />
                </RadzenStack>
            </RadzenFieldset>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Actualizar" ButtonType="ButtonType.Submit" class="mt-2" />
        </EditForm>
    </RadzenStack>
</RadzenStack>




@code {
    private Mascota mascotaActualizada = new();
    private byte[]? photoData;
    private string? selectedFileName;

    [Parameter] public long Id { get; set; }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        selectedFileName = file.Name;

        using var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        photoData = stream.ToArray();
    }

    private async Task ActualizarMascota()
    {
        var mascota = await db.Mascotas.FindAsync(Id);
        string folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "mascotas");

        if (!Directory.Exists(folderPath))
        {
            Directory.CreateDirectory(folderPath);
        }

        if (photoData != null && photoData.Length > 0 || mascota?.Foto != null)
        {
            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            string extension = Path.GetExtension(selectedFileName);
            string fileName = $"{mascota.Nombre}_{timestamp}{extension}";
            string filePath = Path.Combine(folderPath, fileName);

            if (photoData != null)
            {
                await File.WriteAllBytesAsync(filePath, photoData);
                mascota.Foto = Path.Combine("mascotas", fileName);
            }

            if (mascota != null)
            {
                mascota.Nombre = mascotaActualizada.Nombre;
                mascota.FechaEncontrado = mascotaActualizada.FechaEncontrado;
                mascota.FechaPosibleNacimiento = mascotaActualizada.FechaPosibleNacimiento;
                mascota.TipoMascota = mascotaActualizada.TipoMascota;
                mascota.PosiblesEnfermedades = mascotaActualizada.PosiblesEnfermedades;
                mascota.Raza = mascotaActualizada.Raza;
                mascota.Foto = mascotaActualizada.Foto;
                mascota.Caracteristicas = mascotaActualizada.Caracteristicas;
                mascota.EsValido = mascotaActualizada.EsValido;

                db.Entry(mascota).State = EntityState.Modified;

                await db.SaveChangesAsync();
            }

            // Limpia los campos
            mascota = new();
            photoData = null;
            selectedFileName = "";
            dialogService.Close(true);
        }
        else
        {
            Console.WriteLine("No se ha seleccionado ninguna imagen.");
        }
    }

    private async Task RefreshData()
    {
        mascotaActualizada = await db.Mascotas.FindAsync(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshData();
    }
}
